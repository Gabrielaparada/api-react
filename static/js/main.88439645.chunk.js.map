{"version":3,"sources":["Form.js","Jerks.js","App.js","serviceWorker.js","index.js"],"names":["Form","getFormSelection","event","choice","target","value","setState","userChoice","state","action","onChange","this","name","id","onClick","e","props","getChoice","type","Component","Jerks","spies","length","map","spy","index","key","_id","App","cauldronName","preventDefault","console","log","allzards","filter","wizard","deathEater","axios","url","method","responseType","params","then","response","data","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oSAmDeA,E,kDArCb,aAAe,IAAD,8BACZ,gBAMFC,iBAAmB,SAACC,GAClB,IAAMC,EAASD,EAAME,OAAOC,MAC5B,EAAKC,SAAS,CACZC,WAAYJ,KARd,EAAKK,MAAQ,CACXD,WAAY,IAHF,E,qDAmBJ,IAAD,OAEP,OACE,0BAAME,OAAO,IACX,4BAAQC,SAAUC,KAAKV,iBAAkBI,MAAOM,KAAKH,MAAMD,WAAYK,KAAK,gBAAgBC,GAAG,IAC7F,4BAAQR,MAAM,IAAd,gBACA,4BAAQA,MAAM,mBAAd,qBACA,4BAAQA,MAAM,qBAAd,yBACA,4BAAQA,MAAM,mBAAd,qBAGF,4BAAQS,QAAU,SAACC,GAAQ,EAAKC,MAAMC,UAAUF,EAAG,EAAKP,MAAMD,aAAeW,KAAK,UAAlF,gB,GA/BWC,aCUJC,G,MAjBD,SAACJ,GAEb,OACE,8BAE2B,IAAvBA,EAAMK,MAAMC,OACV,kDACAN,EAAMK,MAAME,KAAI,SAACC,EAAKC,GACtB,OACE,wBAAIC,IAAKF,EAAIG,KAAMH,EAAIZ,YCyDpBgB,E,kDAvDb,aAAe,IAAD,8BACZ,gBA0BFX,UAAY,SAACF,EAAGc,GACdd,EAAEe,iBACFC,QAAQC,IAAIH,GACZ,IAKMR,EALc,YAAO,EAAKb,MAAMyB,UAENC,QAAO,SAACC,GACtC,OAAgC,IAAzBA,EAAON,MAEOK,QAAO,SAACV,GAC7B,OAA0B,IAAnBA,EAAIY,cAGX,EAAK9B,SAAS,CACZe,MAAOA,KAtCX,EAAKb,MAAQ,CACXyB,SAAU,GACVZ,MAAO,IAJG,E,gEAQO,IAAD,OAClBgB,IAAM,CACJC,IAAI,0CACJC,OAAO,MACPC,aAAa,OACbC,OAAQ,CACNf,IAAI,kEAELgB,MAAK,SAACC,GAEP,EAAKrC,SAAS,CACZ2B,SAAUU,EAASC,Y,+BA0BvB,OACE,yBAAKC,UAAU,OACb,0CACA,kBAAC,EAAD,CAAM5B,UAAWN,KAAKM,YACtB,kBAAC,EAAD,CAAOI,MAAOV,KAAKH,MAAMa,a,GAlDfF,aCJE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.88439645.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n//component to get user input \n//logical flow \n  //user is going to select from a drop down of wizards groups (technical name: cauldron)\n  //User submits the form. The button press passes the user selection back up to app.js by calling a function passed down through props\n\n  //what we will need up in this motherfucker \n  // a form with a drop down select and a submit button\n  //state\n  //function from props \n\n\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userChoice: \"\",\n    };\n  }\n\n  getFormSelection = (event) => {\n    const choice = event.target.value\n    this.setState({\n      userChoice: choice\n    });\n  };\n  \n  // waitForIt = (e) => {\n  //   this.props.getChoice(e, this.state.userChoice);\n  // }\n\n\n  render() {\n    // console.log(this.props);\n    return (\n      <form action=\"\">\n        <select onChange={this.getFormSelection} value={this.state.userChoice} name=\"whichCauldron\" id=\"\">\n          <option value=\"\">PICK ONE FFS</option>\n          <option value=\"ministryOfMagic\">Ministry of Magic</option>\n          <option value=\"orderOfThePhoenix\"> Order of the Phoenix</option>\n          <option value=\"dumbledoresArmy\">Dumbledores Army</option>\n        </select>\n\n        <button onClick={ (e) => { this.props.getChoice(e, this.state.userChoice) }} type=\"submit\">\n          Submit!\n        </button>\n      </form>\n    );\n  }\n}\nexport default Form;","import React from 'react';\n\n//component to print our spies to the page using .map\n//info will come in from props\n//this will be a function component \n\nconst Jerks = (props) => {\n  // console.log(props.shitheads)\n  return (\n    <main>\n      {\n        props.spies.length === 0 \n        ? <p>Nothing to see here</p> \n        : props.spies.map((spy, index)=> {\n          return (\n            <h3 key={spy._id}>{spy.name}</h3>\n          )\n        })\n      }\n    </main>\n  )\n}\n\nexport default Jerks;","import React , { Component } from 'react';\nimport axios from 'axios'\nimport Form from './Form'\nimport './App.css';\nimport Jerks from './Jerks'\n\n\n//api call to hp API \n//through our component did mount\n//save in state\n//get user selection from a drop down list of wizard groups\n\n//filter list of wizards down to just selected group of wizards\n//filter those wizards down to the spies, save list to state \n//print list to the page using a .map()\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allzards: [],\n      spies: [],\n    };\n  }\n\n  componentDidMount() {\n    axios({\n      url: `https://www.potterapi.com/v1/characters`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        key: `$2a$10$QTTp9tiCR8CNBsj3iA5IR.jJhfdT2FKcAnZsP2gYYGaI27KsGEVwy`,\n      },\n    }).then((response) => {\n      // console.log(response.data);\n      this.setState({\n        allzards: response.data\n      })\n    });\n  }\n\n  //function to get user choice from our form.js component\n  //Use name of t wizard to find members of that group in  our allzards array using a filter\n  //use that new list to filter again and find the shitty spies \n  getChoice = (e, cauldronName) => {\n    e.preventDefault()\n    console.log(cauldronName)\n    const copyOfAllzards = [...this.state.allzards]\n\n    const cauldron = copyOfAllzards.filter((wizard)=>{\n      return wizard[cauldronName] === true;\n    })\n    const spies = cauldron.filter((spy)=> {\n      return spy.deathEater === true;\n\n    })\n      this.setState({\n        spies: spies\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>This sucks</h1>\n        <Form getChoice={this.getChoice}/>\n        <Jerks spies={this.state.spies}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}